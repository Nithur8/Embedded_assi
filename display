/*
 * STM32 Code to Measure Any Voltage Using ADC and Display on LCD
 * Converted from Arduino code by Ahmad Shamshiri (Robojax)
 *
 * Ensure proper resistor divider values for the voltage to be measured.
 * STM32 Black Pill (STM32F401/STM32F411) configured with HAL library.
 *
 * Note: Set up your ADC and I2C peripherals in CubeMX or STM32 IDE.
 * Configure the pin connected to the voltage divider as ADC input.
 */

#include "stm32f4xx_hal.h"
#include "liquidcrystal_i2c.h"
#include <stdio.h>

#define ADC_RESOLUTION 4095.0 // STM32 ADC resolution (12-bit)
#define VREF 3.3             // Reference voltage for STM32 ADC (adjust if using an external reference)

// Resistor values for voltage divider (in ohms)
const unsigned long ValueR1 = 5014;
const unsigned long ValueR2 = 7449;

// ADC and I2C handles (defined in CubeMX-generated code)
extern ADC_HandleTypeDef hadc1;
extern I2C_HandleTypeDef hi2c1;

float voltage = 0;
const int average_of = 500; // Number of readings for averaging

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_I2C1_Init(void);

void readVoltage(void);
float getVoltageAverage(void);

int main(void)
{
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_ADC1_Init();
    MX_I2C1_Init();

    HD44780_Init(2);
    HD44780_Clear();

    while (1)
    {
        float avgVoltage = getVoltageAverage();
        char buffer[16];
        snprintf(buffer, 16, "Vin: %.2f V", avgVoltage);
        HD44780_Clear();
        HD44780_SetCursor(0,0);
        HD44780_PrintStr(buffer);
        HAL_Delay(1000); // Delay 1 second
    }
}

/*
 * @brief Reads the ADC value and calculates the input voltage
 */
void readVoltage()
{
    uint32_t adcValue = 0;
    float voltage_sensed;

    // Start ADC conversion
    HAL_ADC_Start(&hadc1);
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
    {
        adcValue = HAL_ADC_GetValue(&hadc1);
    }
    HAL_ADC_Stop(&hadc1);

    // Calculate sensed voltage
    voltage_sensed = (adcValue * VREF) / ADC_RESOLUTION;

    // Calculate actual voltage using the resistor divider formula
    voltage = voltage_sensed * (1 + ((float)ValueR2 / (float)ValueR1));
}

/*
 * @brief Calculates the average of multiple voltage readings
 * @return Average voltage value
 */
float getVoltageAverage()
{
    float voltage_temp_average = 0;
    for (int i = 0; i < average_of; i++)
    {
        readVoltage();
        voltage_temp_average += voltage;
    }
    return voltage_temp_average / average_of;
}

/*
 * @brief Redirects printf to UART for debugging
 * Ensure UART is configured in CubeMX
 */
int _write(int file, char *ptr, int len)
{
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
    return len;
}

/*
 * CubeMX-generated Peripheral Initialization Functions
 */
void SystemClock_Config(void)
{
    // System clock configuration here (generated by CubeMX)
}

static void MX_GPIO_Init(void)
{
    // GPIO initialization here (generated by CubeMX)
}

static void MX_ADC1_Init(void)
{
    // ADC initialization here (generated by CubeMX)
}

static void MX_I2C1_Init(void)
{
    // I2C initialization here (generated by CubeMX)
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
    __disable_irq();
    while (1)
    {
    }
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
    printf("Wrong parameters value: file %s on line %d\r\n", file, line);
}
#endif /* USE_FULL_ASSERT */
